.make-grid-columns() {
  // 第一个执行，@index= 1
  .col(@index){ 
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
    // .col(2, ".col-xs-1, .col-sm-1, .col-md-1, .col-lg-1");
  }
  // 第二个执行，@index=2,@list =".col-xs-1, .col-sm-1, .col-md-1, .col-lg-1"
  .col(@index, @list) when (@index =< @grid-columns) { 
    //  @grid-columns=12
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
     // 递归调用
    .col((@index + 1), ~"@{list}, @{item}");
    // less作用域是块级作用域，所以传入的@{index}仍为1
    // .col((3), ".col-xs-1, .col-sm-1, .col-md-1, .col-lg-1,.col-xs-2, .col-sm-2, .col-md-2, .col-lg-2");
    /*
     一直调用到
    .col(13,str)
        str:
          .col-xs-1,.col-sm-1,.col-md-1,.col-lg-1,
          .col-xs-2,.col-sm-2,.col-md-2,.col-lg-2,
          ……
          .col-xs-12,.col-sm-12,.col-md-12,.col-lg-12,
    不能进入
    */
  }
  .col(@index, @list) when (@index > @grid-columns) { 
    // str变成选择器
    /*即：
          .col-xs-1,.col-sm-1,.col-md-1,.col-lg-1,
          .col-xs-2,.col-sm-2,.col-md-2,.col-lg-2,
          …… 
          .col-xs-12,.col-sm-12,.col-md-12,.col-lg-12{
            position: relative;
            min-height: 1px;
            padding-right: floor((@grid-gutter-width / 2));
            padding-left: ceil((@grid-gutter-width / 2));
          }
    */
    @{list} {
      position: relative;
      min-height: 1px;
      padding-right: floor((@grid-gutter-width / 2));
      padding-left: ceil((@grid-gutter-width / 2));
    }
  }

  // 进行调用
  .col(1); 
}

/*
float-grid-columns执行结果：
.col-xs-1,.col-xs-2,.col-xs-3,.col-xs-4,...col-xs-12 {
  float: left;
}
*/
.float-grid-columns(@class) {
  .col(@index) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); 
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .col-@{class}-push-0 {
    left: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .col-@{class}-pull-0 {
    right: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

/*.loop-grid-columns执行结果：
.col-xs-12{
  width:12/12;
}
.col-xs-11 {
  width: 11/12;
}
……
.col-xs-1 {
  width: 1/12;
}
*/
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  .loop-grid-columns((@index - 1), @class, @type);
}

//  @class表示xs一类的单位
.make-grid(@class) {
  // 
  .float-grid-columns(@class); /*设置浮动*/
  .loop-grid-columns(@grid-columns, @class, width); /*设置宽度*/
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  .loop-grid-columns(@grid-columns, @class, offset);
}
